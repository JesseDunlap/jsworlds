<% include layout/header %>
<% include layout/nav %>

<div class="row">
	<div class="three columns">
		<ul class="nav-bar vertical">
			<li><a href="p-operator.html">1. The P Operator</a></li>
			<li><a href="p-mvc.html">2. The P MVC</a></li>
			<li class="active"><a href="controllers.html">3. Controllers</a></li>
			<li><a href="views.html">4. Views</a></li>
			<li><a href="#">5. Models</a></li>
		</ul>
	</div>

	<div class="nine columns">
		<div class="row">
			<div class="panel">
				<div class="row">
					<div class="twelve columns">
						<h1>Controllers</h1>
						<p>The glue between the Model and the View</p>
					</div>
				</div>
			</div>
		</div>

		<div class="row">
			<div>
				<h1 class="subheader"><small>Actions</small></h1>

				<p>
					Controllers contain the main logic of your app and server as the glue
					between the model and the view. Controllers have <strong>actions</strong>
					which perform a specific task for the controller. Actions can be triggered
					from a view or from a controller.
				</p>

				<div class="panel">
					<p class="label">To trigger an action in a view...</p><br /><br />
					<p><kbd>P.controller("controller", "action"[, optionalData]);</kbd></p>
					<p>
						<span class="label">NOTE</span> You can pass an optional data argument to the function
						and it will be sent to the controller action.
					</p>
				</div>

				<div class="panel">
					<p class="label">To trigger an action in a controller...</p><br /><br />
					<p><kbd>P.controller("controller").action([optionalData]);</kbd></p>
					<p>
						<span class="label">NOTE</span> In a controller, you are actually calling the
						controller's action function, so you can specify any kind of parameters that
						you want. It is best to keep your actions to one parameter so it will be compatible with views.
					</p>
				</div>
			</div>

			<div>
				<h1 class="subheader"><small>User Interface Interaction</small></h1>
				
				<div>
					<h2 class="subheader"><small>Views</small></h2>

					<p>
						Most actions will do something with the user interface. The most common way to do this is
						to load a view. By default, views use the EJS templating engine.
					</p>

					<p>
						<span class="label alert">IMPORTANT</span> Unlike most traditional web frameworks, P does
						not clear the previous view when you load a new one. In P, it is best to think of loading
						a view not as loading a new page, but as inserting a <strong>subview</strong> into the
						<strong>main view</strong>.
					</p>

					<div class="panel">
						<p class="label">To load a view...</p><br /><br />
						<p><kbd>P.view("view_name"[, options]</kbd></p>
						<p>
							<span class="label">NOTE</span> You can specify options for the view, which will be
							passed into the EJS templating engine, to be used by your view. This is the typical
							way that you send data to the view to be displayed.
						</p>
					</div>

					<p>
						<code>P.view</code> returns an <code>Element</code> object corresponding to your view. If
						you want to reload the contents of the view, or change the view entirely, you can use the
						<code>render</code> method...
					</p>

					<div class="panel">
						<p class="label">To update a view using the render method...</p>
						<p><pre>var view = P.view("view", { name: "Chris" });
view.render("view", { name: "Austin" });</pre></p>
						<p>
							<span class="label">NOTE</span> By using the <code>render</code> method, you only reload
							the parts of the user interface that need to be updated. This is much better than reloading
							the entire page, and allows you to have real-time updated elements on the page.
						</p>
					</div>
				</div>
				
				
				<div>
					<h2 class="subheader"><small>Modifying Elements</small></h2>
					
					<p>
						P allows you to directly modify the elements on a page using a syntax very similar to jQuery.
					</p>
					
					<div class="panel">
						<p class="label">To select an Element...</p><br /><br />
						
						<p><kbd>var element = P.element("#someID");</kbd></p>
						
						<p><span class="label">NOTE</span> Any of the jQuery selectors will work with this, including
							sub-elements and parent elements.</p>
					</div>
					
					<div class="panel">
						<p class="label">Element selector shorthand...</p><br /><br />
						
						<p><kbd>var element = P.$("#someID");</kbd></p>
					</div>
					
					<div class="panel">
						<p class="label">Modifying an elements HTML...</p><br /><br />
						
						<p><kbd>P.$("#someID").html("Hello World");</kbd></p>
						
						<p>
							<span class="label">NOTE</span> Almost every core jQuery function, including <code>fadeIn</code>, <code>fadeOut</code>,
							and more are implemented. For more information, see the <code>Element</code> reference.
						</p>
					</div>
					
					<div class="panel">
						<p class="label">The jq method...</p><br /><br />
						
						<p>By using the <code>jq</code> method you can directly call <strong>any</strong> jQuery function.</p>
						
						<p><kbd>P.$("#someID").jq("attr", ["data-message", "Hello World"]);</kbd></p>
						
						<p>This would be the equivalent of the following jQuery code...</p>
						
						<p><kbd>$('#someID').html("data-message", "Hello World");</kbd></p>
					</div>
					
					<p>
						<span class="label alert">IMPORTANT</span> While modifying elements is no different than loading or rendering a view as far as P is concerned,
						it is often discouraged to directly modify an element in the controller. This violates MVC standards.
						You can, however, use the <code>render</code> method on any element.
					</p>
				</div> 						
			</div>
		</div>
	</div>
</div>

<% include layout/footer %>
