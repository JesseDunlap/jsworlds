<style type="text/css" media="screen">
	body {
		background-color: #000;
	}

	#title {
	    font-weight: bold;
	    position: fixed;
	    z-index: 999;
	    color: #fff;
	    text-shadow: 0px 1px 1px #000,
	                 0px 0px 1px #000;
	    top: -10px;
	    left: -10px;
	    padding: 30px;

	    -webkit-transition: all .1s;
	}

	#messages {
		position: fixed;
		bottom: 0px;
		left: 0px;
		width: 500px;
		height: 100px;
		background-color: #000;
		overflow: scroll;
	}
</style>

<div id="messages"></div>
<div id="title"></div>

<script src="app/public/js/crafty-min.js"></script>
<script src="app/public/js/ss.js"></script>

<script type="text/javascript" charset="utf-8">

	var ss_serialize_big = function(object) {
		for (var key in object) {
			if (typeof object[key] === 'object' || typeof object[key] === 'function') {
				delete object[key];
			}
		}

		return object;
	}

	var ss_serialize = function(object) {	
		var doLevel = function(level) {
			var json = { _methods: {} };

			for (var key in level) {
				if (typeof level[key] === 'object') {
					json[key] = doLevel(level[key]);
				}

				else if (typeof level[key] === 'function') {
					json._methods[key]	= level[key].toString();
					json[key] 			= key;
				}

				else {
					json[key]		= level[key];
				}
			}

			return json;
		};

		return doLevel(object);
	};


	var ss_deserialize = function(object) {
		var doLevel = function(level) {
			if (level._methods === undefined) level._methods = {};

			var json = {};
			var methods = [];

			for (var key in level) {
				if (key !== "_methods") {
					if (typeof level[key] === 'object') {
						json[key] = doLevel(level[key]);
					}

					else if (level._methods[key] !== undefined) {
						var rnd 	= "f" + Math.floor(Math.random() * 100);
						eval("methods['" + rnd + "'] = " + level._methods[key]);
						json[key] 	= methods[rnd];
						delete methods[rnd];
					}

					else {
						json[key] = level[key];
					}
				}
			}

			return json;
		};

		return doLevel(object);
	};


    $('#title').on("hover", function() {
        $(this).hide();
    })

    .on("mouseleave", function() {
        $(this).show();
    });


    window.entities = {};


    P.socket.on("crafty-create", function(data) {
    	if (window.entities[data.selector]) return;
    	window.entities[data.selector] = Crafty.e();
    });

    P.socket.on("crafty-destroy", function(data) {
    	if (window.entities[data.selector]) {
    		window.entities[data.selector].destroy();
    	}
    });

    P.socket.on("crafty-call", function(data) {
    	if (window.entities[data.selector] === undefined) return;
    	window.entities[data.selector][data.method].apply(window.entities[data.selector], data.params);
    });

    P.socket.on("crafty-on", function(data) {
    	if (window.entities[data.selector] === undefined) return;

    	window.entities[data.selector].bind(data.eventName, function(e) {
    		if (e) P.socket.emit(data.callback, ss_serialize_big(e));
    		else P.socket.emit(data.callback);
    	});
    });

    P.socket.on("player-changed-pos", function(data) {
        window.players = window.players || {};
        window.playerNames = window.playerNames || {};

        if (data.map != window.currentMap.id) return;

        if (window.players[data.email] === undefined) {
        	window.playerNames[data.email] = Crafty.e("Text, 2D, Canvas, Player, Fourway, Tween")

        	.attr({
        		x: data.x,
                y: data.y - 45,
                z: 5,
                w: 32,
                h: 32
        	})

        	.text(data.name)

        	.textFont({ size: '30px', weight: 'bold' });


        	
            window.players[data.email] = Crafty.e("2D, Canvas, Player, Fourway, Tween, playerSprite0")

            .attr({
                x: data.x,
                y: data.y,
                z: 7,
                w: 32,
                h: 32
            });
        }

        else {
            window.players[data.email].tween({ x: data.x, y: data.y }, 5);
            window.playerNames[data.email].tween({ x: data.x, y: data.y - 45 }, 5);
        }
    });

    P.socket.on("map-details-changed", function(map) {
        if (map.id == window.currentMap.id) {
            if (window.currentMap.name != map.name) {
                $('#title').fadeOut(200, function() {
                    $(this).html(map.name);
                    $(this).fadeIn(200);
                });
            }

            if (map.alignment == "Peaceful")
                $('#title').animate({ 'color': '#fff' });
            else if (map.alignment == "Dangerous")
                $('#title').animate({ 'color': '#ff3c00' });
            else if (map.alignment == "Lawless")
                $('#title').animate({ 'color': 'red' });

            $('#description').val(map.description);
            $('#mapMusic').val(map.music);
            $('#mapName').val(map.name);

            Crafty.audio.pause("background");
            
            Crafty.audio.add({
            	"background": [map.music]
            });

            Crafty.audio.play("background", -1);

            window.currentMap.name = map.name;
            window.currentMap.alignment = map.alignment;
            window.currentMap.music = map.music;
        }
    });


	var fillLayer = function() {
		var type = window.currentType;
		var layer = window.currentLayer;

		if (confirm("Are you sure that you want to fill layer #" + layer + " with sprite #" + type + "?")) {
			for (var x = 0; x < 20; x++) {
				for (var y = 0; y < 15; y++) {
					P.controller("map").setTile({
						x: 		x,
						y: 		y,
						layer: 	layer,
						tile: 	type,
						map: 	window.currentMap.id
					});
				}
			}
		}
	};


	var createTile = function(x, y, layer, tile) {
		var e = Crafty.e("2D, Canvas, Mouse, sprite" + tile[0])

		.attr({ 
			x: 		x * 32, 
			y: 		y * 32,  
			z: 		layer, 
			
			w: 		32, 
			h: 		32,
			
			blockX: x,
			blockY: y,
			
			sprite: tile[0]
		})

		.bind("MouseDown", function(e) {
			if (e.mouseButton === 2) {
				var blockX = this.attr("blockX");
				var blockY = this.attr("blockY");
				var layer  = window.currentLayer;
			}
			
			else {
				var blockX = this.attr("blockX");
				var blockY = this.attr("blockY");
				var layer  = window.currentLayer;
				var type   = window.currentType;
				
				this.attr("sprite", type);

				P.controller("map").setTile({
					x: 		blockX,
					y: 		blockY,
					layer: 	layer,
					tile: 	type,
					map: 	window.currentMap.id
				});
			}
		})
		
		.bind("MouseOver", function(e) {
			if (window.mouseDown) {
				var blockX = this.attr("blockX");
				var blockY = this.attr("blockY");
				var layer  = window.currentLayer;
				var type   = window.currentType;

				P.controller("map").setTile({
					x: 		blockX,
					y: 		blockY,
					layer: 	layer,
					tile: 	type,
					map: 	window.currentMap.id
				});
			}
		});

		if (tile[1].blocked)
			e.addComponent("Blocked");
			
		return e;
	}

	$(document).on("mousedown", function() {
		window.mouseDown = true;
	})
	
	.on("mouseup", function() {
		window.mouseDown = false;
	});

	window.currentLayer = 0;
	window.currentType  = 85;

	window.tiles = [];

  	Crafty.init(640, 480);

  	Crafty.canvas.init(); // Create a Canvas Element

	Crafty.scene("main", function() {
		(function($) {
			var object = {};
			var i      = 0;

			for (var y = 0; y < 908; y++) {
				for (var x = 0; x < 8; x++) {
					object["sprite" + i] = [ x, y ];
					i++;
				}
			}

			Crafty.sprite(32, "app/public/assets/sprites/default.png", object);

			Crafty.sprite(32, "app/public/assets/sprites/characters.png", {
				playerSprite0: [4, 0]
			});

			Crafty.background("#000");
			
			var renderMap = function(map) {
				Crafty.audio.pause("background");

			    $('#mapName').val(map.name);
			    $('#mapAlignment').val(map.alignment);
			    $('#mapMusic').val(map.music);

			    $('#title').html(map.name || "");
			    $('#description').val(map.description || "");

			    Crafty.audio.add({
			    	"background": [map.music]
			    });

			    if (map.music) {
			    	Crafty.audio.play("background", -1);
			    }

			    if (map.alignment == "Peaceful")
                    $('#title').animate({ 'color': '#fff' });
                else if (map.alignment == "Dangerous")
                    $('#title').animate({ 'color': '#ff3c00' });
                else if (map.alignment == "Lawless")
                    $('#title').animate({ 'color': 'red' });

				for (var layer in map.tiles) {
					var tiles = map.tiles[layer];
					
					for (var x = 0; x < 20; x++) {
						for (var y = 0; y < 15; y++) {
							tiles[x] = tiles[x] || [];
							tiles[x][y] = tiles[x][y] || [0, 0];

							if (tiles[x][y][0] !== 0) {
								var e = createTile(x, y, layer, tiles[x][y]);

								window.tiles[layer] = window.tiles[layer] || [];
								window.tiles[layer][x] = window.tiles[layer][x] || [];

								window.tiles[layer][x][y] = e;
							}
							else {
								window.tiles[layer] = window.tiles[layer] || [];
								window.tiles[layer][x] = window.tiles[layer][x] || [];
							}
						}
					}
				}
			};

			P.socket.on("tile", function(data) {
				if (data.map.id + "" === window.currentMap.id + "") {
					window.tiles[data.layer] = window.tiles[data.layer] || [];
					window.tiles[data.layer][data.x] = window.tiles[data.layer][data.x] || [];

					var e = window.tiles[data.layer][data.x][data.y];
					
					if (e === undefined) {
						e = createTile(data.x, data.y, data.layer, data.tile);
						window.tiles[data.layer][data.x][data.y] = e;
					}
					
					e.removeComponent("sprite" + e.attr("sprite"));
					e.addComponent("sprite" + data.tile);
				}
			});
		
		
			window.getMap = function(id) {
			    window.currentMap = window.currentMap || {};

			    for (var email in window.players) {
			    	window.players[email].destroy();
			    	delete window.players[email];
			    }

                if (window.entities) {
                    for (var selector in window.entities) {
                        window.entities[selector].destroy();
                    }

                    window.entities = {};
                }

				P.controller("map").getMap(id, function(tiles) {
				    $('#mapID[name="id"]').val(tiles.id);

					window.currentMap = SS.deserialize(tiles);
					window.currentMap.id = id;

					for (var layer in window.tiles) {
						for (var x = 0; x < window.tiles[layer].length; x++) {
							for (var y = 0; y < window.tiles[layer][x].length; y++) {
								if (window.tiles[layer] && window.tiles[layer][x] && window.tiles[layer][x][y])
									window.tiles[layer][x][y].destroy();
							}
						}
					}

					window.tiles = {};

					renderMap(window.currentMap);

                    if (window.player === undefined) {
                    	window.playerText = Crafty.e("2D, Canvas, Player, Fourway, Text, Tween")

                    	.attr({
                            x: window.currentMap.startLocation.x,
                            y: window.currentMap.startLocation.y - 45,
                            z: 7,
                            w: 32,
                            h: 32
                        })

                        .text("You");

                        window.player = Crafty.e("2D, Canvas, Player, Fourway, playerSprite0")

                        .attr({
                            x: window.currentMap.startLocation.x,
                            y: window.currentMap.startLocation.y,
                            z: 5,
                            w: 32,
                            h: 32
                        })

                        .bind("Moved", function(e) {
                            P.controller("player").setLocation({
                                map: window.currentMap.id,
                                x: e.x,
                                y: e.y
                            });

                            window.playerText.attr({
                            	x: e.x,
                            	y: e.y - 45
                            });
                        })

                        .fourway(3)
                    }
				});
			};

			window.getMap(0000);
		})(jQuery);
	});
	
	Crafty.scene("main");
</script>
